# scan_project.py
"""
Project Scanner - —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞
API: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –∫–æ–¥–∞
–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: –¥–µ—Ä–µ–≤—å—è —Ñ–∞–π–ª–æ–≤, API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è, –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç, –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
"""

import re
import argparse
import subprocess
from pathlib import Path
from typing import List, Dict
import sys
import io
import json
import shutil
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')

# –ò–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
try:
    from database import add_activity_log
except ImportError:
    def add_activity_log(level: str, message: str, user_id: str = None):
        print(f"üìù [{level}] {message} (user: {user_id})")


class ProjectScanner:
    """
    API: –°–∫–∞–Ω–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
    –í—Ö–æ–¥: root_dir (–∫–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è)
    –í—ã—Ö–æ–¥: None (—Å–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∫–∞–Ω–µ—Ä–∞)
    –õ–æ–≥–∏–∫–∞: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤, —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    """

    def __init__(self, root_dir='.'):
        self.root_dir = Path(root_dir).absolute()
        self.ignore_patterns = [
            '__pycache__', '.git', '.idea', '.vscode', 'venv', 'env',
            'node_modules', '.pytest_cache', '.mypy_cache', 'dist', 'build',
            '*.pyc', '*.pyo', '*.so', '*.dll', '*.exe'
        ]
        add_activity_log("INFO", f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å–∫–∞–Ω–µ—Ä –¥–ª—è {self.root_dir}")

    def should_ignore(self, path):
        """
        API: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞/–ø–∞–ø–∫–∏
        –í—Ö–æ–¥: path (–ø—É—Ç—å –∫ —Ñ–∞–π–ª—É/–ø–∞–ø–∫–µ)
        –í—ã—Ö–æ–¥: bool (–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –Ω–µ—Ç)
        –õ–æ–≥–∏–∫–∞: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫—Ä—ã—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤
        """
        path_str = str(path)

        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã/–ø–∞–ø–∫–∏
        if any(part.startswith('.') and part not in ['.', '..'] for part in path.parts):
            if path.name in ['.env', '.env.example', '.gitignore']:
                return False
            return True

        for pattern in self.ignore_patterns:
            if pattern.startswith('*'):
                if path_str.endswith(pattern[1:]):
                    return True
            elif pattern in path_str:
                return True
        return False

    def scan_structure_tree(self):
        """
        API: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
        –í—Ö–æ–¥: None
        –í—ã—Ö–æ–¥: str (–¥–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤ –≤ Markdown)
        –õ–æ–≥–∏–∫–∞: –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –æ–±—Ö–æ–¥ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        """
        add_activity_log("INFO", "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ä–µ–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞")
        output = ["# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞\n"]

        def scan_directory(directory, level=0):
            try:
                items = sorted(directory.iterdir(), key=lambda x: (not x.is_dir(), x.name.lower()))
                for item in items:
                    if self.should_ignore(item):
                        continue
                    indent = "  " * level
                    if item.is_dir():
                        output.append(f"{indent}- **üìÅ {item.name}/**")
                        scan_directory(item, level + 1)
                    else:
                        output.append(f"{indent}- üìÑ {item.name}")
            except PermissionError:
                output.append(f"{'  ' * level}- *[–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω]*")

        scan_directory(self.root_dir)
        result = "\n".join(output)
        add_activity_log("INFO", f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –¥–µ—Ä–µ–≤–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã ({len(result)} —Å–∏–º–≤–æ–ª–æ–≤)")
        return result

    def scan_api_documentation(self):
        """
        API: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
        –í—Ö–æ–¥: None
        –í—ã—Ö–æ–¥: str (—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API)
        –õ–æ–≥–∏–∫–∞: –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ Python —Ñ–∞–π–ª–æ–≤, –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –∏ —Ñ—É–Ω–∫—Ü–∏–π —Å –¥–æ–∫—Å—Ç—Ä–∏–Ω–≥–∞–º–∏
        """
        add_activity_log("INFO", "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")

        output = ["PROJECT API DOCUMENTATION:"]
        output.append("=" * 50)

        root_path = Path(self.root_dir)
        python_files = list(root_path.rglob('*.py'))

        for file_path in python_files:
            if self.should_ignore(file_path):
                continue

            api_docs = self.extract_api_documentation(file_path)
            if api_docs:
                output.append(f"\n--- {file_path.relative_to(root_path)} ---")
                output.append(api_docs)

        result = "\n".join(output)
        add_activity_log("INFO", f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è ({len(result)} —Å–∏–º–≤–æ–ª–æ–≤)")
        return result

    def extract_api_documentation(self, file_path):
        """
        API: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞
        –í—Ö–æ–¥: file_path (–ø—É—Ç—å –∫ —Ñ–∞–π–ª—É)
        –í—ã—Ö–æ–¥: str (–æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è)
        –õ–æ–≥–∏–∫–∞: –ü–æ–∏—Å–∫ –∫–ª–∞—Å—Å–æ–≤ –∏ —Ñ—É–Ω–∫—Ü–∏–π —Å –¥–æ–∫—Å—Ç—Ä–∏–Ω–≥–∞–º–∏ —á–µ—Ä–µ–∑ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        """
        try:
            content = file_path.read_text(encoding='utf-8')

            # –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è - –∏—â–µ–º —Ç–æ–ª—å–∫–æ –¥–æ–∫—Å—Ç—Ä–∏–Ω–≥–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ class/def
            classes = re.findall(r'class\s+(\w+)[^"]*?"""(.*?)"""', content, re.DOTALL)
            functions = re.findall(r'def\s+(\w+)\s*\([^"]*?"""(.*?)"""', content, re.DOTALL)

            docs = []
            if classes:
                docs.append(f"CLASSES:")
                for class_name, docstring in classes:
                    # –û—á–∏—â–∞–µ–º –¥–æ–∫—Å—Ç—Ä–∏–Ω–≥ –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
                    clean_doc = ' '.join(docstring.strip().split())
                    docs.append(f"  {class_name}: {clean_doc[:100]}...")

            if functions:
                docs.append(f"FUNCTIONS:")
                for func_name, docstring in functions:
                    clean_doc = ' '.join(docstring.strip().split())
                    docs.append(f"  {func_name}: {clean_doc[:100]}...")

            return "\n".join(docs) if docs else f"[No API docs in {file_path.name}]"

        except Exception as e:
            return f"[Error reading {file_path.name}: {e}]"

    def scan_full_code(self):
        """
        API: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∫–æ–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞
        –í—Ö–æ–¥: None
        –í—ã—Ö–æ–¥: str (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ + —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤)
        –õ–æ–≥–∏–∫–∞: –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –æ–±—Ö–æ–¥ —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤–∞–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        """
        add_activity_log("INFO", "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∫–æ–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞")

        output = ["PROJECT FULL CODE ANALYSIS:"]

        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞
        structure = []
        file_paths = []

        def collect_structure(directory, level=0):
            try:
                items = sorted(directory.iterdir(), key=lambda x: (not x.is_dir(), x.name.lower()))
                for item in items:
                    if self.should_ignore(item):
                        continue
                    indent = "  " * level
                    if item.is_dir():
                        structure.append(f"{indent}{item.name}/")
                        collect_structure(item, level + 1)
                    else:
                        structure.append(f"{indent}{item.name}")
                        file_paths.append(item)
            except PermissionError:
                structure.append(f"{'  ' * level}[Permission denied]")

        collect_structure(self.root_dir)
        output.append("STRUCTURE:")
        output.extend(structure)
        output.append("\n" + "=" * 50 + "\n")

        # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤
        output.append("FILE CONTENTS:")
        for file_path in file_paths:
            if file_path.suffix in ['.py', '.md', '.txt', '.json', '.yaml', '.yml', '.toml']:
                output.append(f"\n--- FILE: {file_path.relative_to(self.root_dir)} ---")
                try:
                    content = file_path.read_text(encoding='utf-8', errors='ignore')
                    if content.strip():
                        output.append(content)
                    else:
                        output.append("[File is empty]")
                except Exception as e:
                    output.append(f"[Error reading file: {e}]")

        result = "\n".join(output)
        add_activity_log("INFO", f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ–ª–Ω—ã–π –∫–æ–¥ ({len(result)} —Å–∏–º–≤–æ–ª–æ–≤)")
        return result


def get_specific_code(file_procedure_pairs, root_dir='.'):
    """
    API: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–¥–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä –∏–ª–∏ —Ñ–∞–π–ª–æ–≤
    –í—Ö–æ–¥: file_procedure_pairs (—Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏ –ø—Ä–æ—Ü–µ–¥—É—Ä), root_dir (–∫–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è)
    –í—ã—Ö–æ–¥: str (–∫–æ–¥ –ø—Ä–æ—Ü–µ–¥—É—Ä/—Ñ–∞–π–ª–æ–≤) + –∫–æ–ø–∏—Ä—É–µ—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
    –õ–æ–≥–∏–∫–∞: –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –∏ –ø—Ä–æ—Ü–µ–¥—É—Ä, –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–¥–∞, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞
    """
    scanner = ProjectScanner(root_dir)
    output = []

    add_activity_log("INFO", f"–ü–æ–∏—Å–∫ –∫–æ–¥–∞ –¥–ª—è {len(file_procedure_pairs)} –ø—Ä–æ—Ü–µ–¥—É—Ä")

    for file_spec in file_procedure_pairs:
        if isinstance(file_spec, tuple):
            filename, procedure_name = file_spec
        else:
            filename = file_spec
            procedure_name = None

        # –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞
        file_path = None
        for potential_path in Path(root_dir).rglob('*'):
            if potential_path.name == filename and not scanner.should_ignore(potential_path):
                file_path = potential_path
                break

        if not file_path or not file_path.exists():
            output.append(f"# –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filename}")
            continue

        try:
            content = file_path.read_text(encoding='utf-8', errors='ignore')

            if procedure_name:
                # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø—Ä–æ—Ü–µ–¥—É—Ä—ã
                procedure_code = extract_procedure_code(content, procedure_name, filename)
                if procedure_code:
                    output.append(f"# –§–∞–π–ª: {filename}\n# –ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {procedure_name}\n{procedure_code}")
                else:
                    output.append(f"# –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ '{procedure_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ñ–∞–π–ª–µ {filename}")
            else:
                # –í–µ—Å—å —Ñ–∞–π–ª
                output.append(f"# –§–∞–π–ª: {filename}\n{content}")

        except Exception as e:
            output.append(f"# –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {filename}: {e}")

    result = "\n\n".join(output)

    # –ö–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
    if result.strip():
        try:
            import pyperclip
            pyperclip.copy(result)
            add_activity_log("INFO", f"–ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ ({len(result)} —Å–∏–º–≤–æ–ª–æ–≤)")
            print(f"‚úÖ –ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ ({len(result)} —Å–∏–º–≤–æ–ª–æ–≤)")
        except ImportError:
            add_activity_log("WARNING", "Pyperclip –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            print("‚ùå Pyperclip –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

    return result


def extract_procedure_code(content, procedure_name, filename):
    """
    API: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–¥–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø—Ä–æ—Ü–µ–¥—É—Ä—ã
    –í—Ö–æ–¥: content (—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞), procedure_name (–∏–º—è –ø—Ä–æ—Ü–µ–¥—É—Ä—ã), filename (–∏–º—è —Ñ–∞–π–ª–∞)
    –í—ã—Ö–æ–¥: str (–∫–æ–¥ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã)
    –õ–æ–≥–∏–∫–∞: –ü–æ–∏—Å–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –ø–æ –∏–º–µ–Ω–∏, –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–¥–∞ —Å —É—á–µ—Ç–æ–º –æ—Ç—Å—Ç—É–ø–æ–≤
    """
    lines = content.split('\n')
    in_procedure = False
    procedure_lines = []
    indent_level = 0
    procedure_start = None

    patterns = [
        f"def {procedure_name}(",
        f"async def {procedure_name}(",
        f"class {procedure_name}",
        f"class {procedure_name}(",
    ]

    for i, line in enumerate(lines):
        if not in_procedure and any(line.strip().startswith(pattern) for pattern in patterns):
            in_procedure = True
            procedure_start = i
            indent_level = len(line) - len(line.lstrip())
            procedure_lines.append(line)
            continue

        if in_procedure:
            current_indent = len(line) - len(line.lstrip()) if line.strip() else indent_level + 1
            if current_indent <= indent_level and line.strip() and i > procedure_start:
                break
            procedure_lines.append(line)

    return '\n'.join(procedure_lines) if procedure_lines else ""


def safe_code_modification(tasks: List[Dict]) -> Dict:
    """
    API: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–¥–∞
    –í—Ö–æ–¥: tasks (—Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏)
    –í—ã—Ö–æ–¥: Dict (—Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è)
    –õ–æ–≥–∏–∫–∞: –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–æ–≤, –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞, –æ—Ç–∫–∞—Ç –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    """
    add_activity_log("INFO", f"–ù–∞—á–∞–ª–æ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞: {len(tasks)} –∑–∞–¥–∞—á")

    backup_files = []
    results = []

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–æ–≤
        for task in tasks:
            file_path = Path(task['file'])
            if file_path.exists():
                backup_path = Path(f"backup_{datetime.now().strftime('%H%M%S')}_{file_path.name}")
                shutil.copy2(file_path, backup_path)
                backup_files.append(backup_path)
                results.append(f"–°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø: {backup_path}")

        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        for i, task in enumerate(tasks):
            file_path = Path(task['file'])
            asis = task.get('asis', '')
            tobe = task.get('tobe', '')
            mode = task.get('mode', 'replace')
            desc = task.get('desc', f'–ò–∑–º–µ–Ω–µ–Ω–∏–µ {i + 1}')

            if not file_path or not tobe:
                results.append(f"–û–®–ò–ë–ö–ê: –ó–∞–¥–∞—á–∞ {i + 1}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç file –∏–ª–∏ tobe")
                continue

            if mode == 'create' and not file_path.exists():
                file_path.parent.mkdir(parents=True, exist_ok=True)
                file_path.write_text(tobe, encoding='utf-8')
                results.append(f"–£–°–ü–ï–•: –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {file_path}")

            elif file_path.exists():
                content = file_path.read_text(encoding='utf-8')

                if mode == 'append':
                    new_content = content + '\n' + tobe
                elif mode == 'replace' and asis:
                    if asis in content:
                        new_content = content.replace(asis, tobe)
                    else:
                        results.append(f"–û–®–ò–ë–ö–ê: –ü–∞—Ç—Ç–µ—Ä–Ω asis –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {file_path}")
                        continue
                else:
                    new_content = tobe

                file_path.write_text(new_content, encoding='utf-8')
                results.append(f"–£–°–ü–ï–•: –ò–∑–º–µ–Ω–µ–Ω —Ñ–∞–π–ª: {file_path}")

            else:
                results.append(f"–û–®–ò–ë–ö–ê: –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_path}")
                continue

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
        for task in tasks:
            if task['file'].endswith('.py'):
                file_path = Path(task['file'])
                if file_path.exists():
                    try:
                        compile(file_path.read_text(encoding='utf-8'), file_path.name, 'exec')
                    except SyntaxError as e:
                        results.append(f"–û–®–ò–ë–ö–ê: –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {file_path}: {e}")
                        raise

        add_activity_log("INFO", "–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return {
            "status": "success",
            "message": "–í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ",
            "changes": results,
            "backups": [str(b) for b in backup_files]
        }

    except Exception as e:
        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±—ç–∫–∞–ø–æ–≤
        for backup in backup_files:
            if backup.exists():
                original = Path(backup.name.replace(f"backup_{backup.name.split('_')[1]}_", ""))
                shutil.copy2(backup, original)
                results.append(f"–í–û–°–°–¢–ê–ù–û–í–õ–ï–ù: {original} –∏–∑ {backup}")

        add_activity_log("ERROR", f"–û—à–∏–±–∫–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞: {e}")
        return {
            "status": "error",
            "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π. –ë—ç–∫–∞–ø—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.",
            "errors": results + [f"–û–®–ò–ë–ö–ê: {e}"],
            "backups": [str(b) for b in backup_files]
        }


def generate_project_context():
    """
    API: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞
    –í—Ö–æ–¥: None
    –í—ã—Ö–æ–¥: str (–æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ Markdown)
    –õ–æ–≥–∏–∫–∞: –°–±–æ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞, API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å —Ä–∞–∑–¥–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    """
    add_activity_log("INFO", "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞")

    import json
    from datetime import datetime

    context = {
        "generated_at": datetime.now().isoformat(),
        "project": {},
        "database": {},
        "system_status": {}
    }

    # 1. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
    try:
        scanner = ProjectScanner('.')
        structure = scanner.scan_structure_tree()
        api_docs = scanner.scan_api_documentation()

        context["project"] = {
            "structure": structure,
            "api_documentation": api_docs,
            "file_count": len(list(Path('.').rglob('*.py'))),
            "main_files": [f.name for f in Path('.').glob('*.py') if f.is_file()]
        }
    except Exception as e:
        context["project"]["error"] = str(e)
        add_activity_log("ERROR", f"–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {e}")

    # 2. –°–∏—Å—Ç–µ–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - —Ä–∞–∑–¥–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    try:
        from database import get_recent_logs, get_recent_tasks, SessionLocal, LogEntry, ModificationTask
    except ImportError as e:
        context["database"]["error"] = f"–ú–æ–¥—É–ª—å –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}"
        add_activity_log("ERROR", f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –ë–î: {e}")
    except Exception as e:
        context["database"]["error"] = f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ë–î: {e}"
        add_activity_log("ERROR", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ë–î: {e}")
    else:
        # –ï—Å–ª–∏ –∏–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω - —Ä–∞–±–æ—Ç–∞–µ–º —Å –ë–î
        db = None
        try:
            db = SessionLocal()

            log_count = db.query(LogEntry).count()
            recent_logs = get_recent_logs(5)

            task_count = db.query(ModificationTask).count()
            recent_tasks = get_recent_tasks(5)

            context["database"] = {
                "log_entries_total": log_count,
                "modification_tasks_total": task_count,
                "recent_logs": [
                    {
                        "level": log.level,
                        "message": log.message[:100] + "..." if len(log.message) > 100 else log.message,
                        "user_id": log.user_id,
                        "timestamp": log.timestamp.isoformat()
                    }
                    for log in recent_logs
                ],
                "recent_tasks": [
                    {
                        "file": task.file,
                        "status": task.status,
                        "level": task.level,
                        "desc": task.desc[:100] + "..." if len(
                            task.desc) > 100 else task.desc
                    }
                    for task in recent_tasks
                ]
            }
            add_activity_log("INFO", f"–î–∞–Ω–Ω—ã–µ –ë–î –ø–æ–ª—É—á–µ–Ω—ã: {log_count} –ª–æ–≥–æ–≤, {task_count} –∑–∞–¥–∞—á")

        except Exception as e:
            context["database"]["error"] = f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}"
            add_activity_log("ERROR", f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        finally:
            if db:
                db.close()

    # 3. –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
    try:
        from config import TELEGRAM_BOT_TOKEN, OPENAI_API_KEY, ANTHROPIC_API_KEY, GOOGLE_API_KEY

        context["system_status"] = {
            "telegram_bot_configured": bool(TELEGRAM_BOT_TOKEN),
            "openai_configured": bool(OPENAI_API_KEY),
            "anthropic_configured": bool(ANTHROPIC_API_KEY),
            "google_configured": bool(GOOGLE_API_KEY),
        }
        add_activity_log("INFO", "–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –ø–æ–ª—É—á–µ–Ω")

    except Exception as e:
        context["system_status"]["error"] = str(e)
        add_activity_log("ERROR", f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ Markdown
    markdown_output = f"""# Stark AI Project - Technical Context

## üìä Project Overview
- **Generated**: {context['generated_at']}
- **Python Files**: {context['project'].get('file_count', 'N/A')}
- **Main Modules**: {', '.join(context['project'].get('main_files', []))}
- **Status**: {'‚úÖ Success' if 'error' not in context['project'] else '‚ùå ' + context['project']['error']}

## üóÑÔ∏è Database Status
- **Total Logs**: {context['database'].get('log_entries_total', 'N/A')}
- **Total Tasks**: {context['database'].get('modification_tasks_total', 'N/A')}
- **Status**: {'‚úÖ Connected' if 'error' not in context['database'] else '‚ùå ' + context['database']['error']}

## üîß System Configuration
- **Telegram Bot**: {'‚úÖ Configured' if context['system_status'].get('telegram_bot_configured') else '‚ùå Not configured'}
- **OpenAI API**: {'‚úÖ Configured' if context['system_status'].get('openai_configured') else '‚ùå Not configured'}
- **Anthropic API**: {'‚úÖ Configured' if context['system_status'].get('anthropic_configured') else '‚ùå Not configured'}
- **Google AI API**: {'‚úÖ Configured' if context['system_status'].get('google_configured') else '‚ùå Not configured'}

## üìÅ Project Structure
{context['project'].get('structure', 'N/A')}

## üìã API Documentation
{context['project'].get('api_documentation', 'N/A')}

## üìä Recent Activity

### Last 5 Logs:
{chr(10).join(f"- **{log['level']}** {log['timestamp'][11:19]} {log['message']} (user: {log['user_id'] or 'system'})" for log in context['database'].get('recent_logs', [])) if 'recent_logs' in context['database'] else 'üì≠ No log data available'}

### Last 5 Tasks:
{chr(10).join(f"- **{task['status']}** {task['file']} - {task['desc']}" for task in context['database'].get('recent_tasks', [])) if 'recent_tasks' in context['database'] else 'üì≠ No task data available'}

---
*Context automatically generated by Stark AI System*
"""

    add_activity_log("INFO", f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Ç–µ—Ö–∫–æ–Ω—Ç–µ–∫—Å—Ç ({len(markdown_output)} —Å–∏–º–≤–æ–ª–æ–≤)")
    return markdown_output


def copy_to_clipboard(content: str, command: str):
    """
    API: –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
    –í—Ö–æ–¥: content (—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ), command (–∏–º—è –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
    –í—ã—Ö–æ–¥: None
    –õ–æ–≥–∏–∫–∞: –ü–æ–ø—ã—Ç–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ pyperclip, fallback –≤ —Ñ–∞–π–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    try:
        import pyperclip
        pyperclip.copy(content)
        add_activity_log("INFO", f"{command} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ ({len(content)} —Å–∏–º–≤–æ–ª–æ–≤)")
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ ({len(content)} —Å–∏–º–≤–æ–ª–æ–≤)")
    except ImportError:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –µ—Å–ª–∏ pyperclip –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        context_file = f"{command}_output.txt"
        with open(context_file, "w", encoding="utf-8") as f:
            f.write(content)
        add_activity_log("WARNING", f"{command} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {context_file} (pyperclip –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)")
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {context_file}!")
        print("üìã –°–∫–æ–ø–∏—Ä—É–π —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –≤—Ä—É—á–Ω—É—é (Ctrl+A, Ctrl+C)")


def main():
    """
    API: –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
    –í—Ö–æ–¥: None (–∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏)
    –í—ã—Ö–æ–¥: None (–≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –∏ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞)
    –õ–æ–≥–∏–∫–∞: –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–∞–Ω–¥, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    """
    parser = argparse.ArgumentParser(description='–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ Stark AI')

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    parser.add_argument('--tree', action='store_true', help='–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –≤ Markdown ‚Üí –±—É—Ñ–µ—Ä')
    parser.add_argument('--api', action='store_true', help='API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è ‚Üí –±—É—Ñ–µ—Ä')
    parser.add_argument('--fullcode', action='store_true', help='–ü–æ–ª–Ω—ã–π –∫–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞ ‚Üí –±—É—Ñ–µ—Ä')
    parser.add_argument('--context', action='store_true',
                        help='–¢–µ—Ö–∫–æ–Ω—Ç–µ–∫—Å—Ç (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ + API + —Å–∏—Å—Ç–µ–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ) ‚Üí –±—É—Ñ–µ—Ä')

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    parser.add_argument('--code', nargs='+', action='append', metavar=('FILE', 'PROCEDURE'),
                        help='–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –ø—Ä–æ—Ü–µ–¥—É—Ä: --code filename.py procedure1 procedure2 ‚Üí –±—É—Ñ–µ—Ä')
    parser.add_argument('--modify', type=str, metavar='JSON',
                        help='–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–¥ (JSON —Å—Ç—Ä–æ–∫–∞): --modify \'[{"file":"f.py","tobe":"code"}]\'')

    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    parser.add_argument('--root', '-r', default='.', help='–ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞')

    args = parser.parse_args()
    scanner = ProjectScanner(args.root)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    try:
        if args.tree:
            result = scanner.scan_structure_tree()
            copy_to_clipboard(result, "–î–µ—Ä–µ–≤–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
            return

        elif args.api:
            result = scanner.scan_api_documentation()
            copy_to_clipboard(result, "API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")
            return

        elif args.fullcode:
            result = scanner.scan_full_code()
            copy_to_clipboard(result, "–ü–æ–ª–Ω—ã–π –∫–æ–¥")
            return

        elif args.context:
            result = generate_project_context()
            copy_to_clipboard(result, "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç")
            return

        elif args.code:
            file_procedure_pairs = []
            for code_arg in args.code:
                if len(code_arg) == 1:
                    file_procedure_pairs.append((code_arg[0], None))
                elif len(code_arg) >= 2:
                    filename = code_arg[0]
                    for procedure_name in code_arg[1:]:
                        file_procedure_pairs.append((filename, procedure_name))
                else:
                    print(f"–û–®–ò–ë–ö–ê: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {code_arg}")
                    return

            result = get_specific_code(file_procedure_pairs, args.root)
            print(result)
            return

        elif args.modify:
            print("–†–ï–ñ–ò–ú –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ö–û–î–ê")
            print("=" * 50)

            try:
                tasks = json.loads(args.modify)
                if not isinstance(tasks, list):
                    print("–û–®–ò–ë–ö–ê: –û–∂–∏–¥–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")
                    return

                print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ {len(tasks)} –∑–∞–¥–∞—á...")
                result = safe_code_modification(tasks)
                result_str = json.dumps(result, ensure_ascii=False, indent=2)
                print("\n–†–ï–ó–£–õ–¨–¢–ê–¢ –ò–ó–ú–ï–ù–ï–ù–ò–ô:")
                print(result_str)

            except Exception as e:
                error_msg = f"–û–®–ò–ë–ö–ê: {e}"
                print(error_msg)
                add_activity_log("ERROR", error_msg)

            return

        # –ï—Å–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É
        parser.print_help()

    except Exception as e:
        error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}"
        print(error_msg)
        add_activity_log("ERROR", error_msg)
        raise


if __name__ == "__main__":
    main()
