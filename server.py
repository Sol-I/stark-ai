# server.py
"""
FastAPI Server - –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ REST API –¥–ª—è Stark AI
API: –û–±—Ä–∞–±–æ—Ç–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–æ–º —á–µ—Ä–µ–∑ AI Agent, –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: REST API –¥–ª—è —á–∞—Ç–∞, –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–µ–π –¥–∏–∞–ª–æ–≥–æ–≤
"""

from fastapi import FastAPI, HTTPException
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse
import uvicorn
import asyncio
from pydantic import BaseModel
import logging

# –ò–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
try:
    from agent_core import AIAgent, add_activity_log
    from database import add_activity_log as db_add_activity_log
except ImportError:
    def add_activity_log(level: str, message: str, user_id: str = None):
        print(f"üìù [{level}] {message} (user: {user_id})")


    db_add_activity_log = add_activity_log

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = FastAPI(
    title="Stark AI",
    description="–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ API –¥–ª—è AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞",
    version="1.0.0"
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–≥–µ–Ω—Ç–∞
agent = AIAgent()


class MessageRequest(BaseModel):
    """
    API: –ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞ —á–∞—Ç–∞
    –í—Ö–æ–¥: user_id (–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è), message (—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è)
    –í—ã—Ö–æ–¥: None (–º–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö)
    –õ–æ–≥–∏–∫–∞: –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ /api/chat
    """
    user_id: str
    message: str


class ClearRequest(BaseModel):
    """
    API: –ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
    –í—Ö–æ–¥: user_id (–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    –í—ã—Ö–æ–¥: None (–º–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö)
    –õ–æ–≥–∏–∫–∞: –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ /api/clear
    """
    user_id: str


@app.on_event("startup")
async def startup_event():
    """
    API: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    –í—Ö–æ–¥: None
    –í—ã—Ö–æ–¥: None
    –õ–æ–≥–∏–∫–∞: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    """
    add_activity_log("INFO", "FastAPI —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω", "system")
    logger.info("üöÄ FastAPI —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000")


@app.post("/api/chat")
async def chat_endpoint(request: MessageRequest):
    """
    API: –û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç —á–∞—Ç–∞
    –í—Ö–æ–¥: request (MessageRequest —Å user_id –∏ message)
    –í—ã—Ö–æ–¥: JSON {response: str, status: str}
    –õ–æ–≥–∏–∫–∞: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ AI Agent, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞
    """
    try:
        add_activity_log("INFO", f"–í–µ–±-–∑–∞–ø—Ä–æ—Å –æ—Ç {request.user_id}: '{request.message}'", request.user_id)
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç {request.user_id}")

        response = await agent.process_message(request.user_id, request.message)

        add_activity_log("INFO", f"–í–µ–±-–æ—Ç–≤–µ—Ç –¥–ª—è {request.user_id} ({len(response)} —Å–∏–º–≤–æ–ª–æ–≤)", request.user_id)
        logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {request.user_id}")

        return {
            "response": response,
            "status": "success"
        }

    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±-–∑–∞–ø—Ä–æ—Å–∞: {e}"
        add_activity_log("ERROR", error_msg, request.user_id)
        logger.error(error_msg)
        raise HTTPException(status_code=500, detail=error_msg)


@app.post("/api/clear")
async def clear_history(request: ClearRequest):
    """
    API: –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –í—Ö–æ–¥: request (ClearRequest —Å user_id)
    –í—ã—Ö–æ–¥: JSON {status: str, message: str}
    –õ–æ–≥–∏–∫–∞: –£–¥–∞–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –∏–∑ –∫—ç—à–∞ –∞–≥–µ–Ω—Ç–∞, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    """
    try:
        success = agent.clear_conversation_history(request.user_id)

        if success:
            add_activity_log("INFO", f"–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞ –¥–ª—è {request.user_id}", request.user_id)
            logger.info(f"–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {request.user_id}")
            return {
                "status": "success",
                "message": "–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞"
            }
        else:
            add_activity_log("WARNING", f"–ò—Å—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è {request.user_id}", request.user_id)
            logger.warning(f"–ò—Å—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {request.user_id}")
            return {
                "status": "info",
                "message": "–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            }

    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}"
        add_activity_log("ERROR", error_msg, request.user_id)
        logger.error(error_msg)
        raise HTTPException(status_code=500, detail=error_msg)


@app.get("/api/health")
async def health_check():
    """
    API: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
    –í—Ö–æ–¥: None
    –í—ã—Ö–æ–¥: JSON {status: str, timestamp: str, active_users: int}
    –õ–æ–≥–∏–∫–∞: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –±–∞–∑–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    """
    try:
        active_users = len(agent.get_active_users())
        return {
            "status": "healthy",
            "timestamp": str(asyncio.get_event_loop().time()),
            "active_users": active_users,
            "service": "Stark AI API"
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ health check: {e}")
        raise HTTPException(status_code=503, detail="Service unavailable")


@app.get("/api/logs")
async def get_recent_logs(limit: int = 15):
    """
    API: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ª–æ–≥–æ–≤ –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    –í—Ö–æ–¥: limit (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 50)
    –í—ã—Ö–æ–¥: JSON {logs: List[Dict], status: str}
    –õ–æ–≥–∏–∫–∞: –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –∏–∑ –ë–î, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    """
    try:
        from database import get_recent_logs

        logs = get_recent_logs(limit)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        formatted_logs = []
        for log in logs:
            formatted_logs.append({
                'level': log.level,
                'message': log.message,
                'user_id': log.user_id or 'system',
                'timestamp': log.timestamp.strftime('%H:%M:%S') if log.timestamp else 'unknown'
            })

        return {
            "logs": formatted_logs,
            "status": "success",
            "total": len(formatted_logs)
        }

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
        return {
            "logs": [],
            "status": "error",
            "error": str(e)
        }


@app.get("/api/models")
async def get_available_models():
    """
    API: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
    –í—Ö–æ–¥: None
    –í—ã—Ö–æ–¥: JSON {models: List[Dict], status: str}
    –õ–æ–≥–∏–∫–∞: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π –∏–∑ AI Agent, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    """
    try:
        # –£–±–µ–¥–∏–º—Å—è —á—Ç–æ –∞–≥–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        await agent.ensure_initialized()

        models = []
        if hasattr(agent, 'model_ranking') and agent.model_ranking:
            for model in agent.model_ranking[:10]:  # –ø–µ—Ä–≤—ã–µ 10 –º–æ–¥–µ–ª–µ–π
                models.append({
                    'name': model.get('name', 'Unknown'),
                    'provider': model.get('api_provider', 'Unknown'),
                    'description': model.get('description', '')[:100] + '...' if len(
                        model.get('description', '')) > 100 else model.get('description', ''),
                    'context_length': model.get('context_length', 0)
                })

        return {
            "models": models,
            "status": "success",
            "total": len(models)
        }

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π: {e}")
        return {
            "models": [],
            "status": "error",
            "error": str(e)
        }


@app.get("/")
async def web_interface():
    """
    API: –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    –í—Ö–æ–¥: None
    –í—ã—Ö–æ–¥: HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (static/index.html)
    –õ–æ–≥–∏–∫–∞: –û—Ç–¥–∞—á–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞–π–ª–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    """
    try:
        add_activity_log("INFO", "–ó–∞–ø—Ä–æ—Å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞", "web_user")
        logger.info("–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
        return FileResponse("static/index.html")
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}"
        logger.error(error_msg)
        raise HTTPException(status_code=500, detail=error_msg)


# –ú–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.mount("/static", StaticFiles(directory="static"), name="static")


def run_server(host: str = "0.0.0.0", port: int = 8000):
    """
    API: –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ uvicorn
    –í—Ö–æ–¥: host (—Ö–æ—Å—Ç —Å–µ—Ä–≤–µ—Ä–∞), port (–ø–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞)
    –í—ã—Ö–æ–¥: None (–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤)
    –õ–æ–≥–∏–∫–∞: –ó–∞–ø—É—Å–∫ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    """
    try:
        add_activity_log("INFO", f"–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ {host}:{port}", "system")
        logger.info(f"Starting uvicorn server on {host}:{port}")

        uvicorn.run(
            app,
            host=host,
            port=port,
            workers=1,
            access_log=False,
            log_config=None
        )
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}"
        add_activity_log("ERROR", error_msg, "system")
        logger.error(error_msg)
        raise


if __name__ == "__main__":
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    """
    run_server()