from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import httpx
import logging
import asyncio
from config import TELEGRAM_BOT_TOKEN
from agent_core import add_activity_log

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/root/stark/telegram.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class TelegramBot:
    def __init__(self, token: str = TELEGRAM_BOT_TOKEN):
        self.token = token
        self.api_url = "http://localhost:8000"
        self.application = None
        add_activity_log("INFO", "Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info("Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        add_activity_log("INFO", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞", f"tg_{user_id}")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

        await update.message.reply_text("ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø Stark AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = str(update.effective_user.id)
        user_message = update.message.text

        add_activity_log("INFO", f"Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ: '{user_message}'", f"tg_{user_id}")
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user_id}: {user_message}")

        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")

        try:
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    f"{self.api_url}/api/chat",
                    json={"user_id": f"tg_{user_id}", "message": user_message},
                    timeout=30.0
                )

                if response.status_code == 200:
                    data = response.json()
                    await update.message.reply_text(data["response"])
                    add_activity_log("INFO", "–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram", f"tg_{user_id}")
                    logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                else:
                    error_msg = f"–û—à–∏–±–∫–∞ API: {response.status_code}"
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
                    add_activity_log("ERROR", error_msg, f"tg_{user_id}")
                    logger.error(f"–û—à–∏–±–∫–∞ API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {response.status_code}")

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ Telegram –±–æ—Ç–∞: {e}"
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
            add_activity_log("ERROR", error_msg, f"tg_{user_id}")
            logger.error(f"–û—à–∏–±–∫–∞ Telegram –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))

    async def run_async(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            self.application = Application.builder().token(self.token).build()
            self.setup_handlers()

            add_activity_log("INFO", "–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ (async)")
            logger.info("Telegram bot starting async...")

            await self.application.run_polling()

        except Exception as e:
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Telegram –±–æ—Ç–∞: {e}"
            add_activity_log("ERROR", error_msg)
            logger.error(error_msg)

    def run(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ (–¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞)"""
        try:
            self.application = Application.builder().token(self.token).build()
            self.setup_handlers()

            add_activity_log("INFO", "–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞")
            logger.info("Telegram bot started...")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º event loop
            self.application.run_polling()

        except Exception as e:
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Telegram –±–æ—Ç–∞: {e}"
            add_activity_log("ERROR", error_msg)
            logger.error(error_msg)