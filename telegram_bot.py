"""
Telegram Bot - –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞
API: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Telegram
–ö–æ–º–∞–Ω–¥—ã:
- /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
- —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ AI Agent
"""

import logging
import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from agent_core import AIAgent, add_activity_log
from config import TELEGRAM_BOT_TOKEN

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/root/stark/telegram.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class TelegramBot:
    """
    Telegram Bot - –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞
    API: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Telegram
    –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å AI Agent
    """
    def __init__(self, token: str = TELEGRAM_BOT_TOKEN):
        """
        API: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
        –í—Ö–æ–¥: token (API —Ç–æ–∫–µ–Ω –±–æ—Ç–∞)
        –í—ã—Ö–æ–¥: None (—Å–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞)
        –õ–æ–≥–∏–∫–∞: –°–æ–∑–¥–∞–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä AI Agent –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏
        """
        self.token = token
        self.agent = AIAgent()
        add_activity_log("INFO", "Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –∞–≥–µ–Ω—Ç–æ–º")
        logger.info("Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –∞–≥–µ–Ω—Ç–æ–º")

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        API: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
        –í—Ö–æ–¥: update (–¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è), context (–∫–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞)
        –í—ã—Ö–æ–¥: None (–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
        –õ–æ–≥–∏–∫–∞: –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        """
        user_id = update.effective_user.id
        add_activity_log("INFO", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞", f"tg_{user_id}")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

        await update.message.reply_text("ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø Stark AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        API: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π Telegram
        –í—Ö–æ–¥: update (–¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è), context (–∫–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞)
        –í—ã—Ö–æ–¥: None (–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)
        –õ–æ–≥–∏–∫–∞: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ user_id —Ñ–æ—Ä–º–∞—Ç–∞ "tg_12345", –≤—ã–∑–æ–≤ agent.process_message()
        """
        user_id = str(update.effective_user.id)
        user_message = update.message.text

        add_activity_log("INFO", f"Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ: '{user_message}'", f"tg_{user_id}")
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user_id}: {user_message}")

        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")

        try:
            response = await self.agent.process_message(f"tg_{user_id}", user_message)
            await update.message.reply_text(response)
            add_activity_log("INFO", "–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram", f"tg_{user_id}")
            logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ Telegram –±–æ—Ç–∞: {e}"
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
            add_activity_log("ERROR", error_msg, f"tg_{user_id}")
            logger.error(f"–û—à–∏–±–∫–∞ Telegram –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

    def run(self):
        """
        API: –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞
        –í—Ö–æ–¥: None
        –í—ã—Ö–æ–¥: None (–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤)
        –õ–æ–≥–∏–∫–∞: –°–æ–∑–¥–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π event loop, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, –∑–∞–ø—É—Å–∫–∞–µ—Ç polling
        """
        try:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)

            application = Application.builder().token(self.token).build()
            application.add_handler(CommandHandler("start", self.start))
            application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))

            add_activity_log("INFO", "–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞")
            logger.info("Telegram bot starting...")

            application.run_polling()

        except Exception as e:
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Telegram –±–æ—Ç–∞: {e}"
            add_activity_log("ERROR", error_msg)
            logger.error(error_msg)