import asyncio
import httpx
import logging
from agent_core import add_activity_log

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/root/stark/terminal.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class TerminalClient:
    def __init__(self, api_url: str = "http://localhost:8000"):
        self.api_url = api_url
        self.user_id = "terminal_user"
        add_activity_log("INFO", "–¢–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", self.user_id)
        logger.info("–¢–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def chat_loop(self):
        add_activity_log("INFO", "–ó–∞–ø—É—Å–∫ —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞", self.user_id)
        logger.info("ü§ñ Stark AI Terminal Interface")

        print("ü§ñ Stark AI Terminal")
        print("–ö–æ–º–∞–Ω–¥—ã: 'quit' - –≤—ã—Ö–æ–¥, 'clear' - –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏")
        print("-" * 50)

        while True:
            try:
                user_input = input("\nüë§ –í—ã: ").strip()

                if user_input.lower() == 'quit':
                    add_activity_log("INFO", "–í—ã—Ö–æ–¥ –∏–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞", self.user_id)
                    logger.info("–í—ã—Ö–æ–¥ –∏–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞")
                    break
                elif user_input.lower() == 'clear':
                    await self.clear_history()
                    add_activity_log("INFO", "–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞", self.user_id)
                    print("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞")
                    continue
                elif not user_input:
                    continue

                add_activity_log("INFO", f"–¢–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å: '{user_input}'", self.user_id)
                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {user_input}")

                print("ü§ñ –ê–≥–µ–Ω—Ç –¥—É–º–∞–µ—Ç...", end="", flush=True)

                async with httpx.AsyncClient() as client:
                    response = await client.post(
                        f"{self.api_url}/api/chat",
                        json={"user_id": self.user_id, "message": user_input},
                        timeout=30.0
                    )

                    if response.status_code == 200:
                        data = response.json()
                        print(f"\rü§ñ AI: {data['response']}")
                        add_activity_log("INFO", "–û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ", self.user_id)
                        logger.info("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª")
                    else:
                        error_msg = f"–û—à–∏–±–∫–∞ API: {response.status_code}"
                        print(f"\r‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
                        add_activity_log("ERROR", error_msg, self.user_id)
                        logger.error(error_msg)

            except KeyboardInterrupt:
                add_activity_log("INFO", "–í—ã—Ö–æ–¥ –∏–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ (Ctrl+C)", self.user_id)
                logger.info("–í—ã—Ö–æ–¥ –∏–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –ø–æ Ctrl+C")
                print("\nüëã –í—ã—Ö–æ–¥...")
                break
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞: {e}"
                print(f"\r‚ùå –û—à–∏–±–∫–∞: {e}")
                add_activity_log("ERROR", error_msg, self.user_id)
                logger.error(error_msg)

    async def clear_history(self):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞"""
        try:
            async with httpx.AsyncClient() as client:
                await client.post(f"{self.api_url}/api/clear", params={"user_id": self.user_id})
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}"
            add_activity_log("ERROR", error_msg, self.user_id)
            logger.error(error_msg)


async def main():
    client = TerminalClient()
    await client.chat_loop()


if __name__ == "__main__":
    asyncio.run(main())