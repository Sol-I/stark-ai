#!/usr/bin/env python3
"""
Stark AI Agent - Statistics Monitor
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ –º–µ—Ç—Ä–∏–∫ LLM
"""

import argparse
import json
from datetime import datetime
from agent_core import AIAgent, get_llm_metrics_sample


def print_usage_statistics():
    """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    agent = AIAgent()
    stats = agent.get_usage_statistics()

    print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø LLM")
    print("=" * 50)

    print(f"–û–±—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã: {stats['total_requests']}")
    print(f"–í—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: {stats['total_input_tokens']}")
    print(f"–í—ã—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: {stats['total_output_tokens']}")
    print(f"–í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {stats['total_tokens']}")
    print(
        f"–°—Ä–µ–¥–Ω–∏–µ —Ç–æ–∫–µ–Ω—ã/–∑–∞–ø—Ä–æ—Å: {stats['avg_input_tokens_per_request']:.1f} –≤—Ö / {stats['avg_output_tokens_per_request']:.1f} –≤—ã—Ö")

    # –û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (–ø—Ä–∏–º–µ—Ä–Ω–æ)
    input_cost = stats['total_input_tokens'] * 0.000001  # ~$0.001/1K tokens
    output_cost = stats['total_output_tokens'] * 0.000002  # ~$0.002/1K tokens
    total_cost = input_cost + output_cost
    print(f"–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${total_cost:.4f}")


def print_recent_metrics(limit=10):
    """–í—ã–≤–æ–¥–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    metrics = get_llm_metrics_sample(limit)

    print(f"\nüïí –ü–û–°–õ–ï–î–ù–ò–ï {limit} –ó–ê–ü–†–û–°–û–í")
    print("=" * 50)

    if not metrics:
        print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–ø—Ä–æ—Å–∞—Ö")
        return

    for i, metric in enumerate(metrics, 1):
        print(f"\n#{i} | {metric.get('timestamp', 'N/A')}")
        print(f"  –ú–æ–¥–µ–ª—å: {metric.get('model', 'N/A')}")
        print(f"  –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {metric.get('api_provider', 'N/A')}")
        print(f"  –°—Ç–∞—Ç—É—Å: {metric.get('status', 'N/A')}")
        print(f"  –í—Ä–µ–º—è: {metric.get('response_time_ms', 'N/A')}ms")
        print(f"  –¢–æ–∫–µ–Ω—ã: {metric.get('input_tokens', 0)} –≤—Ö / {metric.get('output_tokens', 0)} –≤—ã—Ö")
        if metric.get('error_type'):
            print(f"  –û—à–∏–±–∫–∞: {metric.get('error_type')}")


def analyze_rate_limits(limit=20):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –ª–∏–º–∏—Ç–∞–º–∏"""
    metrics = get_llm_metrics_sample(limit)

    error_count = sum(1 for m in metrics if m.get('status') == 'error')
    rate_limit_count = sum(
        1 for m in metrics if m.get('error_type') in ['rate_limit', 'daily_rate_limit', 'minute_rate_limit'])

    print(f"\nüö® –ê–ù–ê–õ–ò–ó –û–®–ò–ë–û–ö (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {limit} –∑–∞–ø—Ä–æ—Å–æ–≤)")
    print("=" * 50)
    print(f"–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {len(metrics)}")
    print(f"–û—à–∏–±–æ–∫: {error_count}")
    print(f"–õ–∏–º–∏—Ç—ã: {rate_limit_count}")

    if rate_limit_count > 0:
        print("\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –ª–∏–º–∏—Ç–∞–º–∏!")
        print("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ–Ω—Ç–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –º–æ–¥–µ–ª–µ–π")
        print("2. –£–≤–µ–ª–∏—á–∏—Ç—å –ø–∞—É–∑—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏")
        print("3. –î–æ–±–∞–≤–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")


def main():
    parser = argparse.ArgumentParser(description='–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Stark AI Agent')
    parser.add_argument('--stats', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É')
    parser.add_argument('--metrics', type=int, default=10, help='–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –º–µ—Ç—Ä–∏–∫')
    parser.add_argument('--analyze', action='store_true', help='–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º —Å –ª–∏–º–∏—Ç–∞–º–∏')
    parser.add_argument('--all', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é')

    args = parser.parse_args()

    if not any([args.stats, args.metrics, args.analyze, args.all]):
        args.all = True

    if args.all or args.stats:
        print_usage_statistics()

    if args.all or args.metrics:
        print_recent_metrics(args.metrics)

    if args.all or args.analyze:
        analyze_rate_limits(args.metrics * 2)


if __name__ == "__main__":
    main()