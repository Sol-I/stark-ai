# check_stats.py
"""
Stark AI Agent - Statistics Monitor
API: –£—Ç–∏–ª–∏—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ –º–µ—Ç—Ä–∏–∫ LLM –º–æ–¥–µ–ª–µ–π
–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: –∞–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—à–∏–±–æ–∫, –æ—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
"""

import argparse
import json
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
try:
    from database import add_activity_log
except ImportError:
    def add_activity_log(level: str, message: str, user_id: str = None):
        print(f"üìù [{level}] {message} (user: {user_id})")


def print_usage_statistics():
    """
    API: –í—ã–≤–æ–¥ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è LLM
    –í—Ö–æ–¥: None
    –í—ã—Ö–æ–¥: None (–≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å)
    –õ–æ–≥–∏–∫–∞: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç AI Agent, —Ä–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    """
    try:
        from agent_core import AIAgent
        agent = AIAgent()
        stats = agent.get_usage_statistics()

        add_activity_log("INFO", "–ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", "stats_monitor")

        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø LLM")
        print("=" * 50)

        print(f"–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {stats.get('active_users', 0)}")
        print(f"–í—Å–µ–≥–æ –¥–∏–∞–ª–æ–≥–æ–≤: {stats.get('total_conversations', 0)}")
        print(f"–î–æ—Å—Ç—É–ø–Ω–æ –º–æ–¥–µ–ª–µ–π: {stats.get('models_available', 0)}")
        print(f"–ì–ª—É–±–∏–Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏: {stats.get('max_history_length', 0)}")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ –ë–î
        try:
            from database import SessionLocal, LLMRequest
            db = SessionLocal()
            try:
                total_requests = db.query(LLMRequest).count()
                successful_requests = db.query(LLMRequest).filter(LLMRequest.success == True).count()
                failed_requests = db.query(LLMRequest).filter(LLMRequest.success == False).count()

                total_input_tokens = db.query(LLMRequest.prompt_tokens).filter(
                    LLMRequest.prompt_tokens.isnot(None)).scalar() or 0
                total_output_tokens = db.query(LLMRequest.completion_tokens).filter(
                    LLMRequest.completion_tokens.isnot(None)).scalar() or 0

                print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ó –ë–ê–ó–´ –î–ê–ù–ù–´–•:")
                print(f"–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}")
                print(f"–£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {successful_requests}")
                print(f"–û—à–∏–±–æ—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {failed_requests}")
                print(f"–í—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: {total_input_tokens:,}")
                print(f"–í—ã—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: {total_output_tokens:,}")
                print(f"–í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {total_input_tokens + total_output_tokens:,}")

                if total_requests > 0:
                    success_rate = (successful_requests / total_requests) * 100
                    print(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")

                    # –û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ —Ü–µ–Ω—ã)
                    input_cost = total_input_tokens * 0.000001
                    output_cost = total_output_tokens * 0.000002
                    total_cost = input_cost + output_cost
                    print(f"–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${total_cost:.4f}")

            finally:
                db.close()

        except Exception as e:
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î: {e}")

    except ImportError:
        print("‚ùå AI Agent –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        add_activity_log("ERROR", "AI Agent –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", "stats_monitor")
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}"
        print(f"‚ùå {error_msg}")
        add_activity_log("ERROR", error_msg, "stats_monitor")


def print_recent_metrics(limit=10):
    """
    API: –í—ã–≤–æ–¥ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–µ—Ç—Ä–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ LLM
    –í—Ö–æ–¥: limit (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–æ–∫–∞–∑–∞)
    –í—ã—Ö–æ–¥: None (–≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å)
    –õ–æ–≥–∏–∫–∞: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö LLM –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ –ë–î –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥
    """
    try:
        from database import get_recent_llm_requests, SessionLocal

        db = SessionLocal()
        try:
            requests = get_recent_llm_requests(limit)

            add_activity_log("INFO", f"–ó–∞–ø—Ä–æ—Å {limit} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö LLM –∑–∞–ø—Ä–æ—Å–æ–≤", "stats_monitor")

            print(f"\nüïí –ü–û–°–õ–ï–î–ù–ò–ï {len(requests)} LLM –ó–ê–ü–†–û–°–û–í")
            print("=" * 80)

            if not requests:
                print("üì≠ –í –±–∞–∑–µ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ LLM –∑–∞–ø—Ä–æ—Å–∞—Ö")
                return

            for i, req in enumerate(requests, 1):
                status = "‚úÖ –£–°–ü–ï–•" if req.success else "‚ùå –û–®–ò–ë–ö–ê"
                tokens_info = f"–¢–æ–∫–µ–Ω—ã: {req.prompt_tokens}+{req.completion_tokens}" if req.prompt_tokens else "–¢–æ–∫–µ–Ω—ã: –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
                error_info = f" | –û—à–∏–±–∫–∞: {req.error_type}" if not req.success and req.error_type else ""

                print(f"{i:2d}. {status} | {req.provider:12} | {req.model:30} | {tokens_info}{error_info}")
                print(f"     –í—Ä–µ–º—è: {req.request_duration_ms}–º—Å | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {req.user_id} | {req.timestamp}")

                if req.error_message and not req.success:
                    print(f"     –°–æ–æ–±—â–µ–Ω–∏–µ: {req.error_message[:100]}...")

        finally:
            db.close()

    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è –ë–î: {e}")
        add_activity_log("ERROR", f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –ë–î –≤ print_recent_metrics: {e}", "stats_monitor")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")
        add_activity_log("ERROR", f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}", "stats_monitor")


def analyze_rate_limits(limit=20):
    """
    API: –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º —Å –ª–∏–º–∏—Ç–∞–º–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    –í—Ö–æ–¥: limit (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞)
    –í—ã—Ö–æ–¥: None (–≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å)
    –õ–æ–≥–∏–∫–∞: –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫, –≤—ã—è–≤–ª–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ª–∏–º–∏—Ç–æ–≤, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    """
    try:
        from database import get_recent_llm_requests, SessionLocal

        db = SessionLocal()
        try:
            requests = get_recent_llm_requests(limit)

            add_activity_log("INFO", f"–ê–Ω–∞–ª–∏–∑ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è {limit} –∑–∞–ø—Ä–æ—Å–æ–≤", "stats_monitor")

            if not requests:
                print("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                return

            error_count = sum(1 for req in requests if not req.success)
            rate_limit_count = sum(
                1 for req in requests if req.error_type and 'rate_limit' in req.error_type.lower())

            print(f"\nüö® –ê–ù–ê–õ–ò–ó –û–®–ò–ë–û–ö LLM (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {len(requests)} –∑–∞–ø—Ä–æ—Å–æ–≤)")
            print("=" * 50)
            print(f"–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {len(requests)}")
            print(f"–û—à–∏–±–æ–∫: {error_count}")
            print(f"–õ–∏–º–∏—Ç—ã: {rate_limit_count}")

            if rate_limit_count > 0:
                print("\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –ª–∏–º–∏—Ç–∞–º–∏ API!")
                print("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
                print("1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ rate limiting –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                print("2. –£–≤–µ–ª–∏—á–∏—Ç—å –ø–∞—É–∑—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤ agent_core.py")
                print("3. –î–æ–±–∞–≤–∏—Ç—å —Ä–æ—Ç–∞—Ü–∏—é API –∫–ª—é—á–µ–π –ø—Ä–∏ –ª–∏–º–∏—Ç–∞—Ö")
                print("4. –í–∫–ª—é—á–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
            elif error_count > 0:
                print("\n‚ö†Ô∏è  –ï—Å—Ç—å –æ—à–∏–±–∫–∏, –Ω–æ –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ª–∏–º–∏—Ç–∞–º–∏")
            else:
                print("\n‚úÖ –ü—Ä–æ–±–ª–µ–º —Å –ª–∏–º–∏—Ç–∞–º–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")

            # –ê–Ω–∞–ª–∏–∑ –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º
            provider_errors = {}
            for req in requests:
                if not req.success:
                    provider = req.provider
                    provider_errors[provider] = provider_errors.get(provider, 0) + 1

            if provider_errors:
                print(f"\nüìä –û—à–∏–±–∫–∏ –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º:")
                for provider, count in provider_errors.items():
                    print(f"  {provider}: {count} –æ—à–∏–±–æ–∫")

        finally:
            db.close()

    except ImportError:
        print("‚ùå –ú–æ–¥—É–ª—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        add_activity_log("ERROR", "–ú–æ–¥—É–ª—å –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", "stats_monitor")
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ª–∏–º–∏—Ç–æ–≤: {e}"
        print(f"‚ùå {error_msg}")
        add_activity_log("ERROR", error_msg, "stats_monitor")


def print_database_stats():
    """
    API: –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    –í—Ö–æ–¥: None
    –í—ã—Ö–æ–¥: None (–≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å)
    –õ–æ–≥–∏–∫–∞: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –ë–î (–ª–æ–≥–∏, –∑–∞–¥–∞—á–∏), –∞–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
    """
    try:
        from database import get_recent_logs, get_recent_tasks, SessionLocal, LogEntry, ModificationTask

        db = SessionLocal()
        try:
            log_count = db.query(LogEntry).count()
            task_count = db.query(ModificationTask).count()

            add_activity_log("INFO", "–ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ë–î", "stats_monitor")

            print(f"\nüóÑÔ∏è –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•")
            print("=" * 50)
            print(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥–∞—Ö: {log_count}")
            print(f"–í—Å–µ–≥–æ –∑–∞–¥–∞—á –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏: {task_count}")

            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏
            recent_logs = get_recent_logs(5)
            if recent_logs:
                print(f"\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ª–æ–≥–æ–≤:")
                for log in recent_logs:
                    print(f"  [{log.level}] {log.timestamp.strftime('%H:%M:%S')} {log.message[:50]}...")
            else:
                print(f"\nüìã –õ–æ–≥–æ–≤ –Ω–µ—Ç")

            # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
            recent_tasks = get_recent_tasks(5)
            if recent_tasks:
                print(f"\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–¥–∞—á:")
                for task in recent_tasks:
                    status_icon = "‚úÖ" if task.status == "completed" else "üîÑ" if task.status == "in_progress" else "‚è≥"
                    print(f"  {status_icon} [{task.status}] {task.file}")
            else:
                print(f"\nüìù –ó–∞–¥–∞—á –Ω–µ—Ç")

        finally:
            db.close()

    except ImportError:
        print("‚ùå –ú–æ–¥—É–ª—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        add_activity_log("ERROR", "–ú–æ–¥—É–ª—å –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", "stats_monitor")
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ë–î: {e}"
        print(f"‚ùå {error_msg}")
        add_activity_log("ERROR", error_msg, "stats_monitor")


def main():
    """
    API: –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Ç–∏–ª–∏—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    –í—Ö–æ–¥: None (–∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏)
    –í—ã—Ö–æ–¥: None (–≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å)
    –õ–æ–≥–∏–∫–∞: –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –≤—ã–∑–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    """
    parser = argparse.ArgumentParser(
        description='Stark AI Agent - –£—Ç–∏–ª–∏—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –º–µ—Ç—Ä–∏–∫',
        epilog='–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n'
               '  python check_stats.py --all\n'
               '  python check_stats.py --stats --metrics 5\n'
               '  python check_stats.py --analyze'
    )

    parser.add_argument('--stats', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è LLM')
    parser.add_argument('--metrics', type=int, default=10, metavar='N',
                        help='–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –º–µ—Ç—Ä–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 10)')
    parser.add_argument('--analyze', action='store_true', help='–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º —Å –ª–∏–º–∏—Ç–∞–º–∏ API')
    parser.add_argument('--db', action='store_true', help='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö')
    parser.add_argument('--all', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—é –¥–æ—Å—Ç—É–ø–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é')

    args = parser.parse_args()

    # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É
    if not any([args.stats, args.metrics, args.analyze, args.db, args.all]):
        parser.print_help()
        return

    add_activity_log("INFO", f"–ó–∞–ø—É—Å–∫ check_stats.py —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: {vars(args)}", "stats_monitor")

    if args.all or args.stats:
        print_usage_statistics()

    if args.all or args.metrics:
        print_recent_metrics(args.metrics)

    if args.all or args.analyze:
        analyze_rate_limits(args.metrics * 2)

    if args.all or args.db:
        print_database_stats()

    add_activity_log("INFO", "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã check_stats.py", "stats_monitor")


if __name__ == "__main__":
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–º –∑–∞–ø—É—Å–∫–µ —É—Ç–∏–ª–∏—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    """
    try:
        main()
    except KeyboardInterrupt:
        print("\nüëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")
        add_activity_log("INFO", "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", "stats_monitor")
    except Exception as e:
        error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ check_stats: {e}"
        print(f"‚ùå {error_msg}")
        add_activity_log("ERROR", error_msg, "stats_monitor")