# check_stats.py
"""
Stark AI Agent - Statistics Monitor
API: –£—Ç–∏–ª–∏—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ –º–µ—Ç—Ä–∏–∫ LLM –º–æ–¥–µ–ª–µ–π
–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: –∞–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—à–∏–±–æ–∫, –æ—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
"""

import argparse
import json
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
try:
    from database import add_activity_log
except ImportError:
    def add_activity_log(level: str, message: str, user_id: str = None):
        print(f"üìù [{level}] {message} (user: {user_id})")


def print_usage_statistics():
    """
    API: –í—ã–≤–æ–¥ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è LLM
    –í—Ö–æ–¥: None
    –í—ã—Ö–æ–¥: None (–≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å)
    –õ–æ–≥–∏–∫–∞: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç AI Agent, —Ä–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    """
    try:
        from agent_core import AIAgent
        agent = AIAgent()
        stats = agent.get_usage_statistics()

        add_activity_log("INFO", "–ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", "stats_monitor")

        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø LLM")
        print("=" * 50)

        print(f"–û–±—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã: {stats.get('total_requests', 0)}")
        print(f"–£—Å–ø–µ—à–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: {stats.get('successful_requests', 0)}")
        print(f"–û—à–∏–±–æ—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: {stats.get('failed_requests', 0)}")
        print(f"–í—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: {stats.get('total_input_tokens', 0):,}")
        print(f"–í—ã—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: {stats.get('total_output_tokens', 0):,}")
        print(f"–í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {stats.get('total_tokens', 0):,}")

        if stats.get('total_requests', 0) > 0:
            avg_input = stats.get('total_input_tokens', 0) / stats.get('total_requests', 1)
            avg_output = stats.get('total_output_tokens', 0) / stats.get('total_requests', 1)
            print(f"–°—Ä–µ–¥–Ω–∏–µ —Ç–æ–∫–µ–Ω—ã/–∑–∞–ø—Ä–æ—Å: {avg_input:.1f} –≤—Ö / {avg_output:.1f} –≤—ã—Ö")

        # –û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ —Ü–µ–Ω—ã)
        input_cost = stats.get('total_input_tokens', 0) * 0.000001  # ~$0.001/1K tokens
        output_cost = stats.get('total_output_tokens', 0) * 0.000002  # ~$0.002/1K tokens
        total_cost = input_cost + output_cost
        print(f"–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${total_cost:.4f}")

        success_rate = (stats.get('successful_requests', 0) / stats.get('total_requests', 1)) * 100
        print(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")

    except ImportError:
        print("‚ùå AI Agent –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        add_activity_log("ERROR", "AI Agent –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", "stats_monitor")
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}"
        print(f"‚ùå {error_msg}")
        add_activity_log("ERROR", error_msg, "stats_monitor")


def print_recent_metrics(limit=10):
    """
    API: –í—ã–≤–æ–¥ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–µ—Ç—Ä–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ LLM
    –í—Ö–æ–¥: limit (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–æ–∫–∞–∑–∞)
    –í—ã—Ö–æ–¥: None (–≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å)
    –õ–æ–≥–∏–∫–∞: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—ç–º–ø–ª–∞ –º–µ—Ç—Ä–∏–∫, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤—ã–≤–æ–¥ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    """
    try:
        from agent_core import get_llm_metrics_sample
        metrics = get_llm_metrics_sample(limit)

        add_activity_log("INFO", f"–ó–∞–ø—Ä–æ—Å {limit} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–µ—Ç—Ä–∏–∫", "stats_monitor")

        print(f"\nüïí –ü–û–°–õ–ï–î–ù–ò–ï {limit} –ó–ê–ü–†–û–°–û–í LLM")
        print("=" * 50)

        if not metrics:
            print("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–ø—Ä–æ—Å–∞—Ö")
            return

        for i, metric in enumerate(metrics, 1):
            print(f"\n#{i} | {metric.get('timestamp', 'N/A')}")
            print(f"  –ú–æ–¥–µ–ª—å: {metric.get('model', 'N/A')}")
            print(f"  –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {metric.get('api_provider', 'N/A')}")
            print(f"  –°—Ç–∞—Ç—É—Å: {metric.get('status', 'N/A')}")
            print(f"  –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {metric.get('response_time_ms', 'N/A')}ms")
            print(f"  –¢–æ–∫–µ–Ω—ã: {metric.get('input_tokens', 0)} –≤—Ö / {metric.get('output_tokens', 0)} –≤—ã—Ö")

            if metric.get('error_type'):
                print(f"  ‚ùå –û—à–∏–±–∫–∞: {metric.get('error_type')}")
                if metric.get('error_message'):
                    print(f"     –°–æ–æ–±—â–µ–Ω–∏–µ: {metric.get('error_message')}")

    except ImportError:
        print("‚ùå –ú–æ–¥—É–ª—å –º–µ—Ç—Ä–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        add_activity_log("ERROR", "–ú–æ–¥—É–ª—å –º–µ—Ç—Ä–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", "stats_monitor")
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}"
        print(f"‚ùå {error_msg}")
        add_activity_log("ERROR", error_msg, "stats_monitor")


def analyze_rate_limits(limit=20):
    """
    API: –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º —Å –ª–∏–º–∏—Ç–∞–º–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    –í—Ö–æ–¥: limit (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞)
    –í—ã—Ö–æ–¥: None (–≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å)
    –õ–æ–≥–∏–∫–∞: –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫, –≤—ã—è–≤–ª–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ª–∏–º–∏—Ç–æ–≤, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    """
    try:
        from agent_core import get_llm_metrics_sample
        metrics = get_llm_metrics_sample(limit)

        add_activity_log("INFO", f"–ê–Ω–∞–ª–∏–∑ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è {limit} –∑–∞–ø—Ä–æ—Å–æ–≤", "stats_monitor")

        error_count = sum(1 for m in metrics if m.get('status') == 'error')
        rate_limit_count = sum(
            1 for m in metrics if m.get('error_type') in ['rate_limit', 'daily_rate_limit', 'minute_rate_limit'])

        print(f"\nüö® –ê–ù–ê–õ–ò–ó –û–®–ò–ë–û–ö LLM (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {limit} –∑–∞–ø—Ä–æ—Å–æ–≤)")
        print("=" * 50)
        print(f"–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {len(metrics)}")
        print(f"–û—à–∏–±–æ–∫: {error_count}")
        print(f"–õ–∏–º–∏—Ç—ã: {rate_limit_count}")

        if rate_limit_count > 0:
            print("\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –ª–∏–º–∏—Ç–∞–º–∏ API!")
            print("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            print("1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ rate limiting –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            print("2. –£–≤–µ–ª–∏—á–∏—Ç—å –ø–∞—É–∑—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤ agent_core.py")
            print("3. –î–æ–±–∞–≤–∏—Ç—å —Ä–æ—Ç–∞—Ü–∏—é API –∫–ª—é—á–µ–π –ø—Ä–∏ –ª–∏–º–∏—Ç–∞—Ö")
            print("4. –í–∫–ª—é—á–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
        else:
            print("\n‚úÖ –ü—Ä–æ–±–ª–µ–º —Å –ª–∏–º–∏—Ç–∞–º–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")

        # –ê–Ω–∞–ª–∏–∑ –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º
        provider_errors = {}
        for metric in metrics:
            if metric.get('status') == 'error':
                provider = metric.get('api_provider', 'unknown')
                provider_errors[provider] = provider_errors.get(provider, 0) + 1

        if provider_errors:
            print(f"\nüìä –û—à–∏–±–∫–∏ –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º:")
            for provider, count in provider_errors.items():
                print(f"  {provider}: {count} –æ—à–∏–±–æ–∫")

    except ImportError:
        print("‚ùå –ú–æ–¥—É–ª—å –º–µ—Ç—Ä–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        add_activity_log("ERROR", "–ú–æ–¥—É–ª—å –º–µ—Ç—Ä–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", "stats_monitor")
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ª–∏–º–∏—Ç–æ–≤: {e}"
        print(f"‚ùå {error_msg}")
        add_activity_log("ERROR", error_msg, "stats_monitor")


def print_database_stats():
    """
    API: –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    –í—Ö–æ–¥: None
    –í—ã—Ö–æ–¥: None (–≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å)
    –õ–æ–≥–∏–∫–∞: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –ë–î (–ª–æ–≥–∏, –∑–∞–¥–∞—á–∏), –∞–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
    """
    try:
        from database import get_recent_logs, get_recent_tasks, SessionLocal, LogEntry, ModificationTask

        db = SessionLocal()
        try:
            log_count = db.query(LogEntry).count()
            task_count = db.query(ModificationTask).count()

            add_activity_log("INFO", "–ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ë–î", "stats_monitor")

            print(f"\nüóÑÔ∏è –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•")
            print("=" * 50)
            print(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥–∞—Ö: {log_count}")
            print(f"–í—Å–µ–≥–æ –∑–∞–¥–∞—á –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏: {task_count}")

            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏
            recent_logs = get_recent_logs(5)
            if recent_logs:
                print(f"\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ª–æ–≥–æ–≤:")
                for log in recent_logs:
                    print(f"  [{log.level}] {log.timestamp.strftime('%H:%M:%S')} {log.message[:50]}...")

            # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
            recent_tasks = get_recent_tasks(5)
            if recent_tasks:
                print(f"\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–¥–∞—á:")
                for task in recent_tasks:
                    status_icon = "‚úÖ" if task.status == "completed" else "üîÑ" if task.status == "in_progress" else "‚è≥"
                    print(f"  {status_icon} [{task.status}] {task.file}")

        finally:
            db.close()

    except ImportError:
        print("‚ùå –ú–æ–¥—É–ª—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        add_activity_log("ERROR", "–ú–æ–¥—É–ª—å –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", "stats_monitor")
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ë–î: {e}"
        print(f"‚ùå {error_msg}")
        add_activity_log("ERROR", error_msg, "stats_monitor")


def main():
    """
    API: –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Ç–∏–ª–∏—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    –í—Ö–æ–¥: None (–∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏)
    –í—ã—Ö–æ–¥: None (–≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å)
    –õ–æ–≥–∏–∫–∞: –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –≤—ã–∑–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    """
    parser = argparse.ArgumentParser(
        description='Stark AI Agent - –£—Ç–∏–ª–∏—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –º–µ—Ç—Ä–∏–∫',
        epilog='–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n'
               '  python check_stats.py --all\n'
               '  python check_stats.py --stats --metrics 5\n'
               '  python check_stats.py --analyze'
    )

    parser.add_argument('--stats', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è LLM')
    parser.add_argument('--metrics', type=int, default=10, metavar='N',
                        help='–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –º–µ—Ç—Ä–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 10)')
    parser.add_argument('--analyze', action='store_true', help='–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º —Å –ª–∏–º–∏—Ç–∞–º–∏ API')
    parser.add_argument('--db', action='store_true', help='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö')
    parser.add_argument('--all', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—é –¥–æ—Å—Ç—É–ø–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é')

    args = parser.parse_args()

    # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É
    if not any([args.stats, args.metrics, args.analyze, args.db, args.all]):
        parser.print_help()
        return

    add_activity_log("INFO", f"–ó–∞–ø—É—Å–∫ check_stats.py —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: {vars(args)}", "stats_monitor")

    if args.all or args.stats:
        print_usage_statistics()

    if args.all or args.metrics:
        print_recent_metrics(args.metrics)

    if args.all or args.analyze:
        analyze_rate_limits(args.metrics * 2)

    if args.all or args.db:
        print_database_stats()

    add_activity_log("INFO", "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã check_stats.py", "stats_monitor")


if __name__ == "__main__":
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–º –∑–∞–ø—É—Å–∫–µ —É—Ç–∏–ª–∏—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    """
    try:
        main()
    except KeyboardInterrupt:
        print("\nüëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")
        add_activity_log("INFO", "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", "stats_monitor")
    except Exception as e:
        error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ check_stats: {e}"
        print(f"‚ùå {error_msg}")
        add_activity_log("ERROR", error_msg, "stats_monitor")