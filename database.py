# database.py
"""
Database Module - —Å–∏—Å—Ç–µ–º–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤ –∏ –∑–∞–¥–∞—á –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞
API: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö PostgreSQL, CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤ –∏ –∑–∞–¥–∞—á
–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞
"""

from sqlalchemy import create_engine, Column, String, DateTime, Text, Boolean, Integer, Index
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from datetime import datetime, timezone
from datetime import timedelta
import uuid

Base = declarative_base()


class LogEntry(Base):
    """
    API: –ú–æ–¥–µ–ª—å –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞ –≤ —Å–∏—Å—Ç–µ–º–µ
    –í—Ö–æ–¥: None (—Å–æ–∑–¥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä)
    –í—ã—Ö–æ–¥: None (—Ö—Ä–∞–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ –ª–æ–≥–∞)
    –õ–æ–≥–∏–∫–∞: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç ID –∏ timestamp –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
    """
    __tablename__ = 'logs'
    __table_args__ = (
        Index('idx_logs_timestamp', 'timestamp'),
        Index('idx_logs_level', 'level'),
        Index('idx_logs_user_id', 'user_id'),
    )

    id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))
    level = Column(String)  # INFO, ERROR, DEBUG, WARNING
    message = Column(Text)
    user_id = Column(String)
    timestamp = Column(DateTime, default=lambda: datetime.now(timezone.utc))

    def __repr__(self):
        return f"<Log({self.level}) {self.message[:50]}...>"


class ModificationTask(Base):
    """
    API: –ú–æ–¥–µ–ª—å –∑–∞–¥–∞—á–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞ —Å –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
    –í—Ö–æ–¥: None (—Å–æ–∑–¥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä)
    –í—ã—Ö–æ–¥: None (—Ö—Ä–∞–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏)
    –õ–æ–≥–∏–∫–∞: –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ/–¥–æ—á–µ—Ä–Ω–∏–µ –∑–∞–¥–∞—á–∏, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è–º–∏, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤
    """
    __tablename__ = 'modification_tasks'
    __table_args__ = (
        Index('idx_tasks_status', 'status'),
        Index('idx_tasks_created', 'created_at'),
        Index('idx_tasks_level', 'level'),
        Index('idx_tasks_parent', 'parent_id'),
    )

    # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
    id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))
    parent_id = Column(String(36), nullable=True)  # ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∑–∞–¥–∞—á–∏

    # –î–∞–Ω–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
    file = Column(String, nullable=False)  # –§–∞–π–ª –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
    asis = Column(Text, nullable=True)  # –°—Ç–∞—Ä—ã–π –∫–æ–¥ (None = –¥–æ–±–∞–≤–∏—Ç—å tobe)
    tobe = Column(Text, nullable=True)  # –ù–æ–≤—ã–π –∫–æ–¥ (None = —É–¥–∞–ª–∏—Ç—å asis)
    desc = Column(Text, nullable=False)  # –û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º
    level = Column(String, default="dev")  # dev (—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫) –∏–ª–∏ agent (—Å–∏—Å—Ç–µ–º–∞)
    perm = Column(String, default="false")  # –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞: true/false

    # –°—Ç–∞—Ç—É—Å—ã
    status = Column(String, default="new")  # new, hold, ready, done
    created_at = Column(DateTime, default=lambda: datetime.now(timezone.utc))  # –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
    completed_dt = Column(DateTime, nullable=True)  # –í—Ä–µ–º—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
    error_message = Column(Text, nullable=True)  # –õ–æ–≥ –æ—à–∏–±–∫–∏

    def __repr__(self):
        return f"<ModificationTask({self.status}) {self.file}>"


class LLMRequest(Base):
    """
    API: –ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É
    –í—Ö–æ–¥: None (—Å–æ–∑–¥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä)
    –í—ã—Ö–æ–¥: None (—Ö—Ä–∞–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM)
    –õ–æ–≥–∏–∫–∞: –¢—Ä–µ–∫–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—à–∏–±–æ–∫ –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
    """
    __tablename__ = 'llm_requests'
    __table_args__ = (
        Index('idx_llm_timestamp', 'timestamp'),
        Index('idx_llm_user_timestamp', 'user_id', 'timestamp'),
        Index('idx_llm_provider_success', 'provider', 'success'),
        Index('idx_llm_process_type', 'process_type'),
        Index('idx_llm_error_type', 'error_type'),
    )

    id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))
    user_id = Column(String)  # –ö—Ç–æ —Å–¥–µ–ª–∞–ª –∑–∞–ø—Ä–æ—Å
    provider = Column(String, nullable=False)  # openai, anthropic, google, openrouter
    model = Column(String, nullable=False)  # gpt-4, claude-3-opus, gemini-pro
    endpoint = Column(String, nullable=False)  # web, telegram, api, terminal
    prompt_tokens = Column(Integer, default=0)  # –¢–æ–∫–µ–Ω—ã –ø—Ä–æ–º–ø—Ç–∞
    completion_tokens = Column(Integer, default=0)  # –¢–æ–∫–µ–Ω—ã –æ—Ç–≤–µ—Ç–∞
    total_tokens = Column(Integer, default=0)  # –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤
    timestamp = Column(DateTime, default=lambda: datetime.now(timezone.utc))  # –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
    success = Column(Boolean, default=True)  # –£—Å–ø–µ—à–µ–Ω –ª–∏ –∑–∞–ø—Ä–æ—Å
    error_type = Column(String)  # rate_limit, quota_exceeded, etc
    error_message = Column(Text)  # –î–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    request_duration_ms = Column(Integer)  # –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    retry_count = Column(Integer, default=0)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
    is_free_tier = Column(Boolean, default=True)  # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ª–∏ —Ç–∞—Ä–∏—Ñ
    estimated_limits_remaining = Column(Integer)  # –û—Å—Ç–∞—Ç–æ–∫ –ª–∏–º–∏—Ç–æ–≤ –≤ %
    process_type = Column(String)  # –¢–∏–ø –ø—Ä–æ—Ü–µ—Å—Å–∞
    process_details = Column(Text)  # –î–µ—Ç–∞–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞

    def __repr__(self):
        return f"<LLMRequest({self.provider}/{self.model}) {self.user_id} - {self.process_type}>"


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
DATABASE_URL = "postgresql://developer:dev123@localhost:5432/stark_ai"
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(bind=engine)


def init_db():
    """
    API: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    –í—Ö–æ–¥: None
    –í—ã—Ö–æ–¥: None (—Å–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î)
    –õ–æ–≥–∏–∫–∞: –°–æ–∑–¥–∞–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –≤ Base.metadata
    """
    Base.metadata.create_all(bind=engine)
    print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã!")


def get_db():
    """
    API: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    –í—Ö–æ–¥: None
    –í—ã—Ö–æ–¥: Generator[Session, None, None] (–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–π)
    –õ–æ–≥–∏–∫–∞: –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç
    """
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()


def add_activity_log(level: str, message: str, user_id: str = None):
    """
    API: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    –í—Ö–æ–¥: level (—É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è), message (—Å–æ–æ–±—â–µ–Ω–∏–µ), user_id (ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    –í—ã—Ö–æ–¥: str (ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞) –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    –õ–æ–≥–∏–∫–∞: –°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –ª–æ–≥–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º timestamp –∏ ID
    """
    db = SessionLocal()
    try:
        log = LogEntry(level=level, message=message, user_id=user_id)
        db.add(log)
        db.commit()
        print(f"üìù LOG [{level}]: {message}")
        return log.id
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞: {e}")
        db.rollback()
        return None
    finally:
        db.close()


def get_recent_logs(limit: int = 10):
    """
    API: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π –ª–æ–≥–∞
    –í—Ö–æ–¥: limit (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)
    –í—ã—Ö–æ–¥: List[LogEntry] (—Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –ª–æ–≥–∞)
    –õ–æ–≥–∏–∫–∞: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
    """
    db = SessionLocal()
    try:
        logs = db.query(LogEntry).order_by(LogEntry.timestamp.desc()).limit(limit).all()
        return logs
    finally:
        db.close()


def create_modification_task(
        file: str,
        desc: str,
        asis: str = None,
        tobe: str = None,
        parent_id: str = None,
        level: str = "dev"
) -> str:
    """
    API: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞
    –í—Ö–æ–¥: file (–ø—É—Ç—å –∫ —Ñ–∞–π–ª—É), desc (–æ–ø–∏—Å–∞–Ω–∏–µ), asis (—Å—Ç–∞—Ä—ã–π –∫–æ–¥), tobe (–Ω–æ–≤—ã–π –∫–æ–¥),
          parent_id (ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∑–∞–¥–∞—á–∏), level (—É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞)
    –í—ã—Ö–æ–¥: str (ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏)
    –õ–æ–≥–∏–∫–∞: –°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á—É —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å 'new'
    """
    db = SessionLocal()
    try:
        task = ModificationTask(
            file=file,
            desc=desc,
            asis=asis,
            tobe=tobe,
            parent_id=parent_id,
            level=level
        )
        db.add(task)
        db.commit()
        add_activity_log("INFO", f"–°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏: {file} ({desc[:50]}...)", "system")
        return task.id
    except Exception as e:
        add_activity_log("ERROR", f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}", "system")
        db.rollback()
        raise
    finally:
        db.close()


def update_task_status(task_id: str, status: str, error_message: str = None, perm: str = None):
    """
    API: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
    –í—Ö–æ–¥: task_id (ID –∑–∞–¥–∞—á–∏), status (–Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å), error_message (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ),
          perm (—Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞)
    –í—ã—Ö–æ–¥: None
    –õ–æ–≥–∏–∫–∞: –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç completed_dt –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ 'done'
    """
    db = SessionLocal()
    try:
        task = db.query(ModificationTask).filter(ModificationTask.id == task_id).first()
        if task:
            task.status = status
            if status == "done":
                task.completed_dt = datetime.now(timezone.utc)
            if error_message is not None:
                task.error_message = error_message
            if perm is not None:
                task.perm = perm
            db.commit()
            add_activity_log("INFO", f"–ó–∞–¥–∞—á–∞ {task_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {status}", "system")
    except Exception as e:
        add_activity_log("ERROR", f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}", "system")
        db.rollback()
    finally:
        db.close()


def get_recent_tasks(limit: int = 10):
    """
    API: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–¥–∞—á –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
    –í—Ö–æ–¥: limit (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)
    –í—ã—Ö–æ–¥: List[ModificationTask] (—Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –∑–∞–¥–∞—á)
    –õ–æ–≥–∏–∫–∞: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–¥–∞—á–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
    """
    db = SessionLocal()
    try:
        tasks = db.query(ModificationTask).order_by(ModificationTask.created_at.desc()).limit(limit).all()
        return tasks
    finally:
        db.close()


def grant_permission(task_id: str):
    """
    API: –í—ã–¥–∞—á–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–∞ –∑–∞–¥–∞—á—É
    –í—Ö–æ–¥: task_id (ID –∑–∞–¥–∞—á–∏)
    –í—ã—Ö–æ–¥: None
    –õ–æ–≥–∏–∫–∞: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç perm='true' –¥–ª—è –∑–∞–¥–∞—á–∏ —É—Ä–æ–≤–Ω—è 'dev'
    """
    db = SessionLocal()
    try:
        task = db.query(ModificationTask).filter(ModificationTask.id == task_id).first()
        if task and task.level == "dev":
            task.perm = "true"
            db.commit()
            add_activity_log("INFO", f"–í—ã–¥–∞–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏: {task_id}", "system")
    except Exception as e:
        add_activity_log("ERROR", f"–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: {e}", "system")
        db.rollback()
    finally:
        db.close()


def get_child_tasks(parent_id: str):
    """
    API: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—á–µ—Ä–Ω–∏—Ö –∑–∞–¥–∞—á
    –í—Ö–æ–¥: parent_id (ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∑–∞–¥–∞—á–∏)
    –í—ã—Ö–æ–¥: List[ModificationTask] (—Å–ø–∏—Å–æ–∫ –¥–æ—á–µ—Ä–Ω–∏—Ö –∑–∞–¥–∞—á)
    –õ–æ–≥–∏–∫–∞: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º parent_id
    """
    db = SessionLocal()
    try:
        tasks = db.query(ModificationTask).filter(ModificationTask.parent_id == parent_id).all()
        return tasks
    finally:
        db.close()


def get_ready_tasks():
    """
    API: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –≥–æ—Ç–æ–≤—ã—Ö –∫ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é
    –í—Ö–æ–¥: None
    –í—ã—Ö–æ–¥: List[ModificationTask] (—Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'ready')
    –õ–æ–≥–∏–∫–∞: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–¥–∞—á–∏ —Å status='ready' –∏ (level='agent' –∏–ª–∏ perm='true')
    """
    db = SessionLocal()
    try:
        tasks = db.query(ModificationTask).filter(
            ModificationTask.status == "ready"
        ).filter(
            (ModificationTask.level == "agent") | (ModificationTask.perm == "true")
        ).all()
        return tasks
    finally:
        db.close()


def create_llm_request(
        user_id: str,
        provider: str,
        model: str,
        endpoint: str,
        prompt_tokens: int = 0,
        completion_tokens: int = 0,
        success: bool = True,
        error_type: str = None,
        error_message: str = None,
        request_duration_ms: int = 0,
        retry_count: int = 0,
        is_free_tier: bool = True,
        estimated_limits_remaining: int = 100,
        process_type: str = None,
        process_details: str = None
) -> str:
    """
    API: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –∑–∞–ø—Ä–æ—Å–µ –∫ LLM
    –í—Ö–æ–¥: –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø—Ä–æ–≤–∞–π–¥–µ—Ä, –º–æ–¥–µ–ª—å, —Ç–æ–∫–µ–Ω—ã, —Å—Ç–∞—Ç—É—Å, –æ—à–∏–±–∫–∏)
    –í—ã—Ö–æ–¥: str (ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏)
    –õ–æ–≥–∏–∫–∞: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ª–∏–º–∏—Ç–æ–≤
    """
    db = SessionLocal()
    try:
        request = LLMRequest(
            user_id=user_id,
            provider=provider,
            model=model,
            endpoint=endpoint,
            prompt_tokens=prompt_tokens,
            completion_tokens=completion_tokens,
            total_tokens=prompt_tokens + completion_tokens,
            success=success,
            error_type=error_type,
            error_message=error_message,
            request_duration_ms=request_duration_ms,
            retry_count=retry_count,
            is_free_tier=is_free_tier,
            estimated_limits_remaining=estimated_limits_remaining,
            process_type=process_type,
            process_details=process_details
        )
        db.add(request)
        db.commit()
        add_activity_log("DEBUG", f"LLM –∑–∞–ø—Ä–æ—Å –∑–∞–ø–∏—Å–∞–Ω: {provider}/{model}", user_id)
        return request.id
    except Exception as e:
        add_activity_log("ERROR", f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ LLM –∑–∞–ø—Ä–æ—Å–∞: {e}", user_id)
        db.rollback()
        raise
    finally:
        db.close()


def get_recent_llm_requests(limit: int = 10):
    """
    API: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ LLM
    –í—Ö–æ–¥: limit (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π)
    –í—ã—Ö–æ–¥: List[LLMRequest] (—Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤)
    –õ–æ–≥–∏–∫–∞: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
    """
    db = SessionLocal()
    try:
        requests = db.query(LLMRequest).order_by(LLMRequest.timestamp.desc()).limit(limit).all()
        return requests
    finally:
        db.close()


def get_provider_limits_status(provider: str = None):
    """
    API: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ª–∏–º–∏—Ç–æ–≤ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    –í—Ö–æ–¥: provider (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ - –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä)
    –í—ã—Ö–æ–¥: Dict (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ª–∏–º–∏—Ç–∞–º)
    –õ–æ–≥–∏–∫–∞: –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    """
    db = SessionLocal()
    try:
        from sqlalchemy import func, case

        # –ê–Ω–∞–ª–∏–∑ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –≤–º–µ—Å—Ç–æ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
        time_threshold = datetime.now(timezone.utc).replace(tzinfo=None) - timedelta(hours=24)

        query = db.query(
            LLMRequest.provider,
            func.count().label('total_requests'),
            func.count(case([(LLMRequest.success == True, 1)])).label('successful_requests'),
            func.count(case([(LLMRequest.error_type == 'rate_limit', 1)])).label('rate_limit_errors'),
            func.avg(LLMRequest.estimated_limits_remaining).label('avg_limits_remaining')
        )

        if provider:
            query = query.filter(LLMRequest.provider == provider)

        query = query.filter(LLMRequest.timestamp >= time_threshold)
        query = query.group_by(LLMRequest.provider)

        results = query.all()

        limits_status = {}
        for result in results:
            limits_status[result.provider] = {
                'total_requests': result.total_requests,
                'successful_requests': result.successful_requests,
                'rate_limit_errors': result.rate_limit_errors,
                'avg_limits_remaining': round(result.avg_limits_remaining or 100),
                'health': 'HEALTHY' if (result.avg_limits_remaining or 100) > 80 else
                'WARNING' if (result.avg_limits_remaining or 100) > 50 else 'CRITICAL'
            }

        return limits_status

    except Exception as e:
        logger.error(f"Error getting provider limits: {e}")
        return {}
    finally:
        db.close()


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –º–æ–¥—É–ª—è
import logging

logger = logging.getLogger(__name__)