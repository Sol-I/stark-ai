"""
Test Script for Stark AI Agent
API: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–∞ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from agent_core import AIAgent
from config import API_STRATEGIES, API_ENDPOINTS


async def test_configuration():
    """
    API: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã
    –í—Ö–æ–¥: None
    –í—ã—Ö–æ–¥: None (–≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å)
    –õ–æ–≥–∏–∫–∞: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –∏ endpoints
    """
    print("üîß –¢–ï–°–¢ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
    print("=" * 50)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    print("üìã –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:")
    for provider, strategy in API_STRATEGIES.items():
        status = "‚úÖ" if strategy else "‚ùå"
        print(f"  {status} {provider}: {bool(strategy)}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ endpoints
    print("\nüåê API Endpoints:")
    for provider, endpoint in API_ENDPOINTS.items():
        status = "‚úÖ" if endpoint else "‚ùå"
        print(f"  {status} {provider}: {endpoint}")

    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n")


async def test_provider_strategies():
    """
    API: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –≤ –∞–≥–µ–Ω—Ç–µ
    –í—Ö–æ–¥: None
    –í—ã—Ö–æ–¥: None (–≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å)
    –õ–æ–≥–∏–∫–∞: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ –∞–≥–µ–Ω—Ç–∞
    """
    print("üîç –¢–ï–°–¢ –°–¢–†–ê–¢–ï–ì–ò–ô –ü–†–û–í–ê–ô–î–ï–†–û–í")
    print("=" * 50)

    agent = AIAgent()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    providers = ['openrouter', 'deepseek']
    for provider in providers:
        strategy = agent._get_provider_strategy(provider)
        if strategy:
            print(f"  ‚úÖ {provider}: —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            print(f"     URL —à–∞–±–ª–æ–Ω: {strategy['url']}")
        else:
            print(f"  ‚ùå {provider}: —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    print("‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã\n")


async def test_agent_initialization():
    """
    API: –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞
    –í—Ö–æ–¥: None
    –í—ã—Ö–æ–¥: None (–≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å)
    –õ–æ–≥–∏–∫–∞: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞
    """
    print("üîÑ –¢–ï–°–¢ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò –ê–ì–ï–ù–¢–ê")
    print("=" * 50)

    agent = AIAgent()

    try:
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞
        await agent.ensure_initialized()

        print(f"  ‚úÖ –ê–≥–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print(f"  üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(agent.model_ranking)}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3 –º–æ–¥–µ–ª–∏
        if agent.model_ranking:
            print(f"  üèÜ –¢–æ–ø-3 –º–æ–¥–µ–ª–∏:")
            for i, model in enumerate(agent.model_ranking[:3], 1):
                print(f"     {i}. {model['name']}")
        else:
            print(f"  ‚ö†Ô∏è  –ú–æ–¥–µ–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")

    print("‚úÖ –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω\n")


async def test_agent_processing():
    """
    API: –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–º
    –í—Ö–æ–¥: None
    –í—ã—Ö–æ–¥: None (–≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å)
    –õ–æ–≥–∏–∫–∞: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–∞
    """
    print("ü§ñ –¢–ï–°–¢ –û–ë–†–ê–ë–û–¢–ö–ò –°–û–û–ë–©–ï–ù–ò–Ø")
    print("=" * 50)

    agent = AIAgent()

    try:
        print("üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...")
        response = await agent.process_message(
            user_id="test_user",
            message="–ü—Ä–∏–≤–µ—Ç! –û—Ç–≤–µ—Ç—å –∫–æ—Ä–æ—Ç–∫–æ - –∫–∞–∫–∞—è —Å–µ–≥–æ–¥–Ω—è –¥–∞—Ç–∞?",
            endpoint="test_suite",
            process_type="test"
        )

        print(f"üì® –û—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞: {response}")

        # –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞
        if "‚ùå" in response:
            print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ –∞–≥–µ–Ω—Ç–∞")
        elif not response or response.isspace():
            print("‚ö†Ô∏è  –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
        else:
            print("‚úÖ –ê–≥–µ–Ω—Ç –æ—Ç–≤–µ—Ç–∏–ª —É—Å–ø–µ—à–Ω–æ")

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

    print("‚úÖ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω\n")


async def test_multiple_messages():
    """
    API: –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    –í—Ö–æ–¥: None
    –í—ã—Ö–æ–¥: None (–≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å)
    –õ–æ–≥–∏–∫–∞: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π –¥–∏–∞–ª–æ–≥–∞ –∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
    """
    print("üí¨ –¢–ï–°–¢ –ù–ï–°–ö–û–õ–¨–ö–ò–• –°–û–û–ë–©–ï–ù–ò–ô")
    print("=" * 50)

    agent = AIAgent()
    user_id = "multi_test_user"

    test_messages = [
        "–ü—Ä–∏–≤–µ—Ç!",
        "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
        "–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?"
    ]

    try:
        for i, message in enumerate(test_messages, 1):
            print(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ {i}: '{message}'")
            response = await agent.process_message(
                user_id=user_id,
                message=message,
                endpoint="test_suite",
                process_type="multi_test"
            )
            print(f"   üì® –û—Ç–≤–µ—Ç: {response[:100]}..." if len(response) > 100 else f"   üì® –û—Ç–≤–µ—Ç: {response}")
            print()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        history = agent.get_conversation_history(user_id)
        print(f"üìä –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞: {len(history)} —Å–æ–æ–±—â–µ–Ω–∏–π")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

    print("‚úÖ –¢–µ—Å—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω\n")


async def main():
    """
    API: –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    –í—Ö–æ–¥: None
    –í—ã—Ö–æ–¥: None (–≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å)
    –õ–æ–≥–∏–∫–∞: –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
    """
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í STARK AI AGENT")
    print("=" * 60)

    await test_configuration()
    await test_provider_strategies()
    await test_agent_initialization()
    await test_agent_processing()
    await test_multiple_messages()

    print("üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print("=" * 60)


if __name__ == "__main__":
    asyncio.run(main())