# telegram_bot.py
"""
Telegram Bot - –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞
API: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Telegram
"""

import logging
import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

from core.services.database.database import add_activity_log
from core.agent.agent_core import ai_agent  # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç
from core.config.config import TELEGRAM_BOT_TOKEN

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class TelegramBot:
    def __init__(self, token: str = TELEGRAM_BOT_TOKEN):
        self.token = token
        self.application = None
        add_activity_log("INFO", "Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", "system")
        logger.info("Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        tg_user_id = f"tg_{user_id}"
        add_activity_log("INFO", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞", tg_user_id)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
        await update.message.reply_text("ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø Stark AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        tg_user_id = f"tg_{user_id}"
        user_message = update.message.text
        add_activity_log("INFO", f"Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ: '{user_message}'", tg_user_id)
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user_id}: {user_message}")

        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")

        try:
            add_activity_log("DEBUG", "–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ AI –∞–≥–µ–Ω—Ç–æ–º", tg_user_id)
            response = await ai_agent.process_message(tg_user_id, user_message)
            add_activity_log("INFO", f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram ({len(response)} —Å–∏–º–≤–æ–ª–æ–≤)", tg_user_id)
            await update.message.reply_text(response)
            logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ Telegram –±–æ—Ç–∞: {e}"
            add_activity_log("ERROR", error_msg, tg_user_id)
            logger.error(f"–û—à–∏–±–∫–∞ Telegram –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")

    async def handle_error(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        error = context.error
        user_id = f"tg_{update.effective_user.id}" if update and update.effective_user else "unknown"
        add_activity_log("ERROR", f"–û—à–∏–±–∫–∞ –≤ Telegram –±–æ—Ç–µ: {error}", user_id)
        logger.error(f"–û—à–∏–±–∫–∞ –≤ Telegram –±–æ—Ç–µ: {error}")

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º event loop –¥–ª—è –ø–æ—Ç–æ–∫–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º event loop –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)

            self.application = Application.builder().token(self.token).build()
            self.application.add_handler(CommandHandler("start", self.start))
            self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
            self.application.add_error_handler(self.handle_error)

            logger.info("Telegram bot starting with dedicated event loop...")
            add_activity_log("INFO", "Telegram –±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–º event loop", "system")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Å–æ–∑–¥–∞–Ω–Ω–æ–º loop
            loop.run_until_complete(self.application.run_polling())

        except Exception as e:
            logger.error(f"Failed to start Telegram bot: {e}")
            add_activity_log("ERROR", f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞: {e}", "system")
            raise


telegram_bot = TelegramBot()


def main():
    bot = TelegramBot()
    bot.run()


if __name__ == "__main__":
    main()